
i2c_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da8  08003da8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db0  08003db0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000009c  08003e54  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003e54  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8a5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebe  00000000  00000000  0002f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00031830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a6d  00000000  00000000  00032fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f693  00000000  00000000  00057a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea3ed  00000000  00000000  000670e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001514d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  00151528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003d14 	.word	0x08003d14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	08003d14 	.word	0x08003d14

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t i = 0, ret;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fada 	bl	8000b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f857 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f921 	bl	800081c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005da:	f000 f893 	bl	8000704 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f8d1 	bl	8000784 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f000 fb3f 	bl	8000c68 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart3, StartMSG, sizeof(StartMSG), 10000);
 80005ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80005ee:	221a      	movs	r2, #26
 80005f0:	491d      	ldr	r1, [pc, #116]	; (8000668 <main+0xa4>)
 80005f2:	481e      	ldr	r0, [pc, #120]	; (800066c <main+0xa8>)
 80005f4:	f002 f8a4 	bl	8002740 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80005f8:	2301      	movs	r3, #1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	e028      	b.n	8000650 <main+0x8c>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	b29b      	uxth	r3, r3
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	b299      	uxth	r1, r3
 8000606:	2305      	movs	r3, #5
 8000608:	2203      	movs	r2, #3
 800060a:	4819      	ldr	r0, [pc, #100]	; (8000670 <main+0xac>)
 800060c:	f000 fe43 	bl	8001296 <HAL_I2C_IsDeviceReady>
 8000610:	4603      	mov	r3, r0
 8000612:	71bb      	strb	r3, [r7, #6]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d007      	beq.n	800062a <main+0x66>
      {
          HAL_UART_Transmit(&huart3, Space, sizeof(Space), 10000);
 800061a:	f242 7310 	movw	r3, #10000	; 0x2710
 800061e:	2204      	movs	r2, #4
 8000620:	4914      	ldr	r1, [pc, #80]	; (8000674 <main+0xb0>)
 8000622:	4812      	ldr	r0, [pc, #72]	; (800066c <main+0xa8>)
 8000624:	f002 f88c 	bl	8002740 <HAL_UART_Transmit>
 8000628:	e00f      	b.n	800064a <main+0x86>
      }
      else if(ret == HAL_OK)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10c      	bne.n	800064a <main+0x86>
      {
          sprintf(Buffer, "0x%X", i);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	461a      	mov	r2, r3
 8000634:	4910      	ldr	r1, [pc, #64]	; (8000678 <main+0xb4>)
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <main+0xb8>)
 8000638:	f002 fefe 	bl	8003438 <siprintf>
          HAL_UART_Transmit(&huart3, Buffer, sizeof(Buffer), 10000);
 800063c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000640:	2219      	movs	r2, #25
 8000642:	490e      	ldr	r1, [pc, #56]	; (800067c <main+0xb8>)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <main+0xa8>)
 8000646:	f002 f87b 	bl	8002740 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3301      	adds	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dad2      	bge.n	80005fe <main+0x3a>
      }
  }
  HAL_UART_Transmit(&huart3, EndMSG, sizeof(EndMSG), 10000);
 8000658:	f242 7310 	movw	r3, #10000	; 0x2710
 800065c:	220b      	movs	r2, #11
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <main+0xbc>)
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <main+0xa8>)
 8000662:	f002 f86d 	bl	8002740 <HAL_UART_Transmit>
  /*--[ Scanning Done ]--*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0xa2>
 8000668:	20000004 	.word	0x20000004
 800066c:	20000104 	.word	0x20000104
 8000670:	200000b8 	.word	0x200000b8
 8000674:	20000000 	.word	0x20000000
 8000678:	08003d2c 	.word	0x08003d2c
 800067c:	20000194 	.word	0x20000194
 8000680:	20000020 	.word	0x20000020

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2238      	movs	r2, #56	; 0x38
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fec8 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006aa:	f000 ffd3 	bl	8001654 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f869 	bl	800179c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006d0:	f000 f8e0 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2301      	movs	r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fb6d 	bl	8001dcc <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006f8:	f000 f8cc 	bl	8000894 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_I2C1_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_I2C1_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_I2C1_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <MX_I2C1_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_I2C1_Init+0x74>)
 800071c:	2201      	movs	r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <MX_I2C1_Init+0x74>)
 8000740:	f000 fd1a 	bl	8001178 <HAL_I2C_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f8a3 	bl	8000894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <MX_I2C1_Init+0x74>)
 8000752:	f000 fee7 	bl	8001524 <HAL_I2CEx_ConfigAnalogFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 f89a 	bl	8000894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_I2C1_Init+0x74>)
 8000764:	f000 ff29 	bl	80015ba <HAL_I2CEx_ConfigDigitalFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f891 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000b8 	.word	0x200000b8
 800077c:	40005400 	.word	0x40005400
 8000780:	0010061a 	.word	0x0010061a

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_USART3_UART_Init+0x90>)
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_USART3_UART_Init+0x94>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_USART3_UART_Init+0x90>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_USART3_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_USART3_UART_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007ce:	f001 ff67 	bl	80026a0 <HAL_UART_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f85c 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007e0:	f002 fd2e 	bl	8003240 <HAL_UARTEx_SetTxFifoThreshold>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f853 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007f2:	f002 fd63 	bl	80032bc <HAL_UARTEx_SetRxFifoThreshold>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 f84a 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_USART3_UART_Init+0x90>)
 8000802:	f002 fce4 	bl	80031ce <HAL_UARTEx_DisableFifoMode>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 f842 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000104 	.word	0x20000104
 8000818:	40004800 	.word	0x40004800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_GPIO_Init+0x74>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <MX_GPIO_Init+0x74>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_GPIO_Init+0x74>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_GPIO_Init+0x74>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <MX_GPIO_Init+0x74>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_GPIO_Init+0x74>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_GPIO_Init+0x74>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <MX_GPIO_Init+0x74>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_GPIO_Init+0x74>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_GPIO_Init+0x74>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <MX_GPIO_Init+0x74>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_GPIO_Init+0x74>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09e      	sub	sp, #120	; 0x78
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2254      	movs	r2, #84	; 0x54
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fd8d 	bl	8003428 <memset>
  if(hi2c->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_I2C_MspInit+0xa8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d136      	bne.n	8000986 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fc6d 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ffb0 	bl	8000894 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_I2C_MspInit+0xac>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <HAL_I2C_MspInit+0xac>)
 800093a:	f043 0302 	orr.w	r3, r3, #2
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_I2C_MspInit+0xac>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800094c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000950:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000952:	2312      	movs	r3, #18
 8000954:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095e:	2304      	movs	r3, #4
 8000960:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <HAL_I2C_MspInit+0xb0>)
 800096a:	f000 fa83 	bl	8000e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_I2C_MspInit+0xac>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_I2C_MspInit+0xac>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_I2C_MspInit+0xac>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3778      	adds	r7, #120	; 0x78
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40005400 	.word	0x40005400
 8000994:	40021000 	.word	0x40021000
 8000998:	48000400 	.word	0x48000400

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09e      	sub	sp, #120	; 0x78
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2254      	movs	r2, #84	; 0x54
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fd33 	bl	8003428 <memset>
  if(huart->Instance==USART3)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d136      	bne.n	8000a3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009cc:	2304      	movs	r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fc13 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ff56 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0xac>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <HAL_UART_MspInit+0xac>)
 80009ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f2:	6593      	str	r3, [r2, #88]	; 0x58
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_UART_MspInit+0xac>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0xac>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_UART_MspInit+0xac>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_UART_MspInit+0xac>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0xb0>)
 8000a36:	f000 fa1d 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3778      	adds	r7, #120	; 0x78
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40004800 	.word	0x40004800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f8c6 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f002 fc7e 	bl	80033d4 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200001b0 	.word	0x200001b0
 8000b0c:	200001c8 	.word	0x200001c8

08000b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5e:	f7ff ffd7 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 fc3d 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fd2d 	bl	80005c4 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000b78:	08003db8 	.word	0x08003db8
  ldr r2, =_sbss
 8000b7c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000b80:	200001c8 	.word	0x200001c8

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>

08000b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f93d 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff fe7a 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	79fb      	ldrb	r3, [r7, #7]

}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_InitTick+0x68>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d022      	beq.n	8000c12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_InitTick+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f93a 	bl	8000e5a <HAL_SYSTICK_Config>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10f      	bne.n	8000c0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d809      	bhi.n	8000c06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfa:	f000 f914 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_InitTick+0x70>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	e007      	b.n	8000c16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	e004      	b.n	8000c16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e001      	b.n	8000c16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000034 	.word	0x20000034
 8000c24:	2000002c 	.word	0x2000002c
 8000c28:	20000030 	.word	0x20000030

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x20>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <HAL_IncTick+0x1c>)
 8000c3c:	6013      	str	r3, [r2, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	200001b4 	.word	0x200001b4
 8000c4c:	20000034 	.word	0x20000034

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200001b4 	.word	0x200001b4

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff ffee 	bl	8000c50 <HAL_GetTick>
 8000c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c80:	d004      	beq.n	8000c8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_Delay+0x40>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8c:	bf00      	nop
 8000c8e:	f7ff ffdf 	bl	8000c50 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d8f7      	bhi.n	8000c8e <HAL_Delay+0x26>
  {
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000034 	.word	0x20000034

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff47 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff5e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffb2 	bl	8000dcc <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e82:	e15a      	b.n	800113a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 814c 	beq.w	8001134 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d005      	beq.n	8000eb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d017      	beq.n	8000f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0203 	and.w	r2, r3, #3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80a6 	beq.w	8001134 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <HAL_GPIO_Init+0x2e4>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	4a5a      	ldr	r2, [pc, #360]	; (8001158 <HAL_GPIO_Init+0x2e4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_GPIO_Init+0x2e4>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001000:	4a56      	ldr	r2, [pc, #344]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102a:	d01f      	beq.n	800106c <HAL_GPIO_Init+0x1f8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x2ec>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d019      	beq.n	8001068 <HAL_GPIO_Init+0x1f4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x2f0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d013      	beq.n	8001064 <HAL_GPIO_Init+0x1f0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x2f4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d00d      	beq.n	8001060 <HAL_GPIO_Init+0x1ec>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x2f8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x1e8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d101      	bne.n	8001058 <HAL_GPIO_Init+0x1e4>
 8001054:	2305      	movs	r3, #5
 8001056:	e00a      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001058:	2306      	movs	r3, #6
 800105a:	e008      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 800105c:	2304      	movs	r3, #4
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001060:	2303      	movs	r3, #3
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107e:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_GPIO_Init+0x300>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b0:	4a30      	ldr	r2, [pc, #192]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_GPIO_Init+0x300>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x300>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f ae9d 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48001000 	.word	0x48001000
 8001170:	48001400 	.word	0x48001400
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e081      	b.n	800128e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fba2 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	e006      	b.n	8001200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d104      	bne.n	8001212 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69d9      	ldr	r1, [r3, #28]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2220      	movs	r2, #32
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b08a      	sub	sp, #40	; 0x28
 800129a:	af02      	add	r7, sp, #8
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	460b      	mov	r3, r1
 80012a4:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	f040 80f1 	bne.w	800149a <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c6:	d101      	bne.n	80012cc <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80012c8:	2302      	movs	r3, #2
 80012ca:	e0e7      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_I2C_IsDeviceReady+0x44>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e0e0      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2224      	movs	r2, #36	; 0x24
 80012e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d107      	bne.n	8001308 <HAL_I2C_IsDeviceReady+0x72>
 80012f8:	897b      	ldrh	r3, [r7, #10]
 80012fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001306:	e004      	b.n	8001312 <HAL_I2C_IsDeviceReady+0x7c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800130e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fc9a 	bl	8000c50 <HAL_GetTick>
 800131c:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b20      	cmp	r3, #32
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b10      	cmp	r3, #16
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800134a:	e034      	b.n	80013b6 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001352:	d01a      	beq.n	800138a <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001354:	f7ff fc7c 	bl	8000c50 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d302      	bcc.n	800136a <HAL_I2C_IsDeviceReady+0xd4>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10f      	bne.n	800138a <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f043 0220 	orr.w	r2, r3, #32
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e088      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b20      	cmp	r3, #32
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <HAL_I2C_IsDeviceReady+0x12c>
 80013bc:	7fbb      	ldrb	r3, [r7, #30]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0c4      	beq.n	800134c <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d01a      	beq.n	8001406 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	2120      	movs	r1, #32
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f862 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e058      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2220      	movs	r2, #32
 80013f0:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e04a      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	2120      	movs	r1, #32
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f847 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e03d      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2210      	movs	r2, #16
 8001426:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2220      	movs	r2, #32
 800142e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d118      	bne.n	800146a <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001446:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f826 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e01c      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2220      	movs	r2, #32
 8001468:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	f63f af3b 	bhi.w	80012f0 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800149a:	2302      	movs	r3, #2
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014b4:	e022      	b.n	80014fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014bc:	d01e      	beq.n	80014fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014be:	f7ff fbc7 	bl	8000c50 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d302      	bcc.n	80014d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d113      	bne.n	80014fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f043 0220 	orr.w	r2, r3, #32
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e00f      	b.n	800151c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4013      	ands	r3, r2
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	429a      	cmp	r2, r3
 8001518:	d0cd      	beq.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b20      	cmp	r3, #32
 8001538:	d138      	bne.n	80015ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001544:	2302      	movs	r3, #2
 8001546:	e032      	b.n	80015ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2224      	movs	r2, #36	; 0x24
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015ac:	2302      	movs	r3, #2
  }
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d139      	bne.n	8001644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015da:	2302      	movs	r3, #2
 80015dc:	e033      	b.n	8001646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2224      	movs	r2, #36	; 0x24
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800160c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2220      	movs	r2, #32
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001644:	2302      	movs	r3, #2
  }
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d141      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001662:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166e:	d131      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001676:	4a46      	ldr	r2, [pc, #280]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001688:	4a41      	ldr	r2, [pc, #260]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2232      	movs	r2, #50	; 0x32
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a6:	e002      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ba:	d102      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f2      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ce:	d158      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e057      	b.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016da:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e4:	e04d      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ec:	d141      	bne.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d131      	bne.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2232      	movs	r2, #50	; 0x32
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9b      	lsrs	r3, r3, #18
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001732:	e002      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3b01      	subs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001746:	d102      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f2      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175a:	d112      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e011      	b.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001770:	e007      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40007000 	.word	0x40007000
 8001794:	2000002c 	.word	0x2000002c
 8001798:	431bde83 	.word	0x431bde83

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e306      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d075      	beq.n	80018a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c4:	4b94      	ldr	r3, [pc, #592]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d102      	bne.n	80017da <HAL_RCC_OscConfig+0x3e>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_OscConfig+0x44>
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d10b      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d05b      	beq.n	80018a4 <HAL_RCC_OscConfig+0x108>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d157      	bne.n	80018a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e2e1      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x74>
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a84      	ldr	r2, [pc, #528]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e01d      	b.n	800184c <HAL_RCC_OscConfig+0xb0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x98>
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7e      	ldr	r2, [pc, #504]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b7c      	ldr	r3, [pc, #496]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7b      	ldr	r2, [pc, #492]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0xb0>
 8001834:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a77      	ldr	r2, [pc, #476]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b75      	ldr	r3, [pc, #468]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a74      	ldr	r2, [pc, #464]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f9fc 	bl	8000c50 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff f9f8 	bl	8000c50 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e2a6      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186e:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0xc0>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff f9e8 	bl	8000c50 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff f9e4 	bl	8000c50 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e292      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001896:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0xe8>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d075      	beq.n	800199e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b2:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018bc:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_OscConfig+0x136>
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_OscConfig+0x13c>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d11f      	bne.n	8001918 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d8:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x154>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e265      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	4946      	ldr	r1, [pc, #280]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001904:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <HAL_RCC_OscConfig+0x280>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f955 	bl	8000bb8 <HAL_InitTick>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d043      	beq.n	800199c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e251      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d023      	beq.n	8001968 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f990 	bl	8000c50 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff f98c 	bl	8000c50 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e23a      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	061b      	lsls	r3, r3, #24
 8001960:	492d      	ldr	r1, [pc, #180]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
 8001966:	e01a      	b.n	800199e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 800196e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f96c 	bl	8000c50 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff f968 	bl	8000c50 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e216      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x1e0>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d041      	beq.n	8001a2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01c      	beq.n	80019ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff f945 	bl	8000c50 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff f941 	bl	8000c50 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1ef      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ef      	beq.n	80019ca <HAL_RCC_OscConfig+0x22e>
 80019ea:	e020      	b.n	8001a2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f928 	bl	8000c50 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a02:	e00d      	b.n	8001a20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff f924 	bl	8000c50 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d906      	bls.n	8001a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1d2      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ea      	bne.n	8001a04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80a6 	beq.w	8001b88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a40:	4b84      	ldr	r3, [pc, #528]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2b4>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x2b6>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a72:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x4bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4bc>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f8e1 	bl	8000c50 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff f8dd 	bl	8000c50 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e18b      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x4bc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_RCC_OscConfig+0x32e>
 8001ab8:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac8:	e024      	b.n	8001b14 <HAL_RCC_OscConfig+0x378>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d110      	bne.n	8001af4 <HAL_RCC_OscConfig+0x358>
 8001ad2:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af2:	e00f      	b.n	8001b14 <HAL_RCC_OscConfig+0x378>
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	4a56      	ldr	r2, [pc, #344]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d016      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f898 	bl	8000c50 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff f894 	bl	8000c50 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e140      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ed      	beq.n	8001b24 <HAL_RCC_OscConfig+0x388>
 8001b48:	e015      	b.n	8001b76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f881 	bl	8000c50 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f87d 	bl	8000c50 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e129      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ed      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d03c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba2:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f850 	bl	8000c50 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb4:	f7ff f84c 	bl	8000c50 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0fa      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ef      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x418>
 8001bd4:	e01b      	b.n	8001c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff f833 	bl	8000c50 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bee:	f7ff f82f 	bl	8000c50 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0dd      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ef      	bne.n	8001bee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80d1 	beq.w	8001dba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	f000 808b 	beq.w	8001d3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d15e      	bne.n	8001cec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f809 	bl	8000c50 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c40:	e00c      	b.n	8001c5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff f805 	bl	8000c50 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d905      	bls.n	8001c5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0b3      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ec      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <HAL_RCC_OscConfig+0x62c>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6a11      	ldr	r1, [r2, #32]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c8a:	0852      	lsrs	r2, r2, #1
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0552      	lsls	r2, r2, #21
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c96:	0852      	lsrs	r2, r2, #1
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0652      	lsls	r2, r2, #25
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ca2:	06d2      	lsls	r2, r2, #27
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4947      	ldr	r1, [pc, #284]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a44      	ldr	r2, [pc, #272]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ffc4 	bl	8000c50 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe ffc0 	bl	8000c50 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e06e      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x530>
 8001cea:	e066      	b.n	8001dba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001d0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff9c 	bl	8000c50 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe ff98 	bl	8000c50 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e046      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x580>
 8001d3a:	e03e      	b.n	8001dba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e039      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d12c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	3b01      	subs	r3, #1
 8001d68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d123      	bne.n	8001db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d11b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d113      	bne.n	8001db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	019f800c 	.word	0x019f800c

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e11e      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b8e      	ldr	r3, [pc, #568]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 020f 	bic.w	r2, r3, #15
 8001dfa:	498c      	ldr	r1, [pc, #560]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b8a      	ldr	r3, [pc, #552]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e106      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d073      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d129      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0f4      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e38:	f000 f99e 	bl	8002178 <RCC_GetSysClockFreqFromPLLSource>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_ClockConfig+0x268>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d93f      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d033      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d12f      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e66:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e6e:	4a70      	ldr	r2, [pc, #448]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e024      	b.n	8001ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0c6      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0be      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ea4:	f000 f8ce 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4a61      	ldr	r2, [pc, #388]	; (8002034 <HAL_RCC_ClockConfig+0x268>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d909      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eba:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4957      	ldr	r1, [pc, #348]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed8:	f7fe feba 	bl	8000c50 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7fe feb6 	bl	8000c50 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e095      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a42      	ldr	r2, [pc, #264]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f40:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4936      	ldr	r1, [pc, #216]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f62:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d21d      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 020f 	bic.w	r2, r3, #15
 8001f84:	4929      	ldr	r1, [pc, #164]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fe60 	bl	8000c50 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe fe5c 	bl	8000c50 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e03b      	b.n	8002022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1ed      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4917      	ldr	r1, [pc, #92]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490f      	ldr	r1, [pc, #60]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff6:	f000 f825 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490c      	ldr	r1, [pc, #48]	; (8002038 <HAL_RCC_ClockConfig+0x26c>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x270>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fdcc 	bl	8000bb8 <HAL_InitTick>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	04c4b400 	.word	0x04c4b400
 8002038:	08003d34 	.word	0x08003d34
 800203c:	2000002c 	.word	0x2000002c
 8002040:	20000030 	.word	0x20000030

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b04      	cmp	r3, #4
 8002054:	d102      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e047      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d102      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e03e      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d136      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3301      	adds	r3, #1
 8002090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68d2      	ldr	r2, [r2, #12]
 80020a4:	0a12      	lsrs	r2, r2, #8
 80020a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
      break;
 80020b0:	e00c      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	0a12      	lsrs	r2, r2, #8
 80020c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
      break;
 80020ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0e5b      	lsrs	r3, r3, #25
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	3301      	adds	r3, #1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e001      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020ec:	693b      	ldr	r3, [r7, #16]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200

08002108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_RCC_GetHCLKFreq+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000002c 	.word	0x2000002c

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002124:	f7ff fff0 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4904      	ldr	r1, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	08003d44 	.word	0x08003d44

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002150:	f7ff ffda 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0adb      	lsrs	r3, r3, #11
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08003d44 	.word	0x08003d44

08002178 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3301      	adds	r3, #1
 8002194:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d10c      	bne.n	80021b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a6:	68d2      	ldr	r2, [r2, #12]
 80021a8:	0a12      	lsrs	r2, r2, #8
 80021aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
    break;
 80021b4:	e00c      	b.n	80021d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021c0:	68d2      	ldr	r2, [r2, #12]
 80021c2:	0a12      	lsrs	r2, r2, #8
 80021c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    break;
 80021ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0e5b      	lsrs	r3, r3, #25
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021ea:	687b      	ldr	r3, [r7, #4]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	00f42400 	.word	0x00f42400

08002204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800220c:	2300      	movs	r3, #0
 800220e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002210:	2300      	movs	r3, #0
 8002212:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8098 	beq.w	8002352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a39      	ldr	r2, [pc, #228]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800225a:	f7fe fcf9 	bl	8000c50 <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002260:	e009      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7fe fcf5 	bl	8000c50 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d902      	bls.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	74fb      	strb	r3, [r7, #19]
        break;
 8002274:	e005      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ef      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d159      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01e      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d019      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe fcb5 	bl	8000c50 <HAL_GetTick>
 80022e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e8:	e00b      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fcb1 	bl	8000c50 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d902      	bls.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002300:	e006      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ec      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800232c:	e008      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	74bb      	strb	r3, [r7, #18]
 8002332:	e005      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002340:	7c7b      	ldrb	r3, [r7, #17]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4ba7      	ldr	r3, [pc, #668]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	4aa6      	ldr	r2, [pc, #664]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235e:	4ba1      	ldr	r3, [pc, #644]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f023 0203 	bic.w	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	499d      	ldr	r1, [pc, #628]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002380:	4b98      	ldr	r3, [pc, #608]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 020c 	bic.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4995      	ldr	r1, [pc, #596]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023a2:	4b90      	ldr	r3, [pc, #576]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	498c      	ldr	r1, [pc, #560]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023c4:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4984      	ldr	r1, [pc, #528]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	497b      	ldr	r1, [pc, #492]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002408:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	4973      	ldr	r1, [pc, #460]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242a:	4b6e      	ldr	r3, [pc, #440]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	496a      	ldr	r1, [pc, #424]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800244c:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4962      	ldr	r1, [pc, #392]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246e:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	4959      	ldr	r1, [pc, #356]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002490:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	4951      	ldr	r1, [pc, #324]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024b2:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	4948      	ldr	r1, [pc, #288]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024f2:	d105      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	4932      	ldr	r1, [pc, #200]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252a:	d105      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a2c      	ldr	r2, [pc, #176]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002536:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	4924      	ldr	r1, [pc, #144]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002562:	d105      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	4916      	ldr	r1, [pc, #88]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800259a:	d105      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d019      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d2:	d109      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025de:	60d3      	str	r3, [r2, #12]
 80025e0:	e002      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4926      	ldr	r1, [pc, #152]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002612:	d105      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263a:	4918      	ldr	r1, [pc, #96]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264a:	d105      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a12      	ldr	r2, [pc, #72]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002656:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800266a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002682:	d105      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002690:	7cbb      	ldrb	r3, [r7, #18]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e042      	b.n	8002738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7fe f969 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8c2 	bl	800286c <UART_SetConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e022      	b.n	8002738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fbb2 	bl	8002e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800270e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800271e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fc39 	bl	8002fa8 <UART_CheckIdleState>
 8002736:	4603      	mov	r3, r0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 8083 	bne.w	8002862 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_Transmit+0x28>
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e07b      	b.n	8002864 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_UART_Transmit+0x3a>
 8002776:	2302      	movs	r3, #2
 8002778:	e074      	b.n	8002864 <HAL_UART_Transmit+0x124>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2221      	movs	r2, #33	; 0x21
 800278e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002792:	f7fe fa5d 	bl	8000c50 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b0:	d108      	bne.n	80027c4 <HAL_UART_Transmit+0x84>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	e003      	b.n	80027cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80027d4:	e02c      	b.n	8002830 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fc2c 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e039      	b.n	8002864 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10b      	bne.n	800280e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	3302      	adds	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e007      	b.n	800281e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3301      	adds	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1cc      	bne.n	80027d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2200      	movs	r2, #0
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fbf9 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e006      	b.n	8002864 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
  }
}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b08c      	sub	sp, #48	; 0x30
 8002872:	af00      	add	r7, sp, #0
 8002874:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4baa      	ldr	r3, [pc, #680]	; (8002b44 <UART_SetConfig+0x2d8>)
 800289c:	4013      	ands	r3, r2
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a9f      	ldr	r2, [pc, #636]	; (8002b48 <UART_SetConfig+0x2dc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d4:	4313      	orrs	r3, r2
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80028e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f023 010f 	bic.w	r1, r3, #15
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a90      	ldr	r2, [pc, #576]	; (8002b4c <UART_SetConfig+0x2e0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d125      	bne.n	800295c <UART_SetConfig+0xf0>
 8002910:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <UART_SetConfig+0x2e4>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d81a      	bhi.n	8002954 <UART_SetConfig+0xe8>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <UART_SetConfig+0xb8>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002935 	.word	0x08002935
 8002928:	08002945 	.word	0x08002945
 800292c:	0800293d 	.word	0x0800293d
 8002930:	0800294d 	.word	0x0800294d
 8002934:	2301      	movs	r3, #1
 8002936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800293a:	e116      	b.n	8002b6a <UART_SetConfig+0x2fe>
 800293c:	2302      	movs	r3, #2
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002942:	e112      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002944:	2304      	movs	r3, #4
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800294a:	e10e      	b.n	8002b6a <UART_SetConfig+0x2fe>
 800294c:	2308      	movs	r3, #8
 800294e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002952:	e10a      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002954:	2310      	movs	r3, #16
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800295a:	e106      	b.n	8002b6a <UART_SetConfig+0x2fe>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <UART_SetConfig+0x2e8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d138      	bne.n	80029d8 <UART_SetConfig+0x16c>
 8002966:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <UART_SetConfig+0x2e4>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b0c      	cmp	r3, #12
 8002972:	d82d      	bhi.n	80029d0 <UART_SetConfig+0x164>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <UART_SetConfig+0x110>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	080029b1 	.word	0x080029b1
 8002980:	080029d1 	.word	0x080029d1
 8002984:	080029d1 	.word	0x080029d1
 8002988:	080029d1 	.word	0x080029d1
 800298c:	080029c1 	.word	0x080029c1
 8002990:	080029d1 	.word	0x080029d1
 8002994:	080029d1 	.word	0x080029d1
 8002998:	080029d1 	.word	0x080029d1
 800299c:	080029b9 	.word	0x080029b9
 80029a0:	080029d1 	.word	0x080029d1
 80029a4:	080029d1 	.word	0x080029d1
 80029a8:	080029d1 	.word	0x080029d1
 80029ac:	080029c9 	.word	0x080029c9
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029b6:	e0d8      	b.n	8002b6a <UART_SetConfig+0x2fe>
 80029b8:	2302      	movs	r3, #2
 80029ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029be:	e0d4      	b.n	8002b6a <UART_SetConfig+0x2fe>
 80029c0:	2304      	movs	r3, #4
 80029c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029c6:	e0d0      	b.n	8002b6a <UART_SetConfig+0x2fe>
 80029c8:	2308      	movs	r3, #8
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029ce:	e0cc      	b.n	8002b6a <UART_SetConfig+0x2fe>
 80029d0:	2310      	movs	r3, #16
 80029d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029d6:	e0c8      	b.n	8002b6a <UART_SetConfig+0x2fe>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5e      	ldr	r2, [pc, #376]	; (8002b58 <UART_SetConfig+0x2ec>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d125      	bne.n	8002a2e <UART_SetConfig+0x1c2>
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <UART_SetConfig+0x2e4>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d016      	beq.n	8002a1e <UART_SetConfig+0x1b2>
 80029f0:	2b30      	cmp	r3, #48	; 0x30
 80029f2:	d818      	bhi.n	8002a26 <UART_SetConfig+0x1ba>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d00a      	beq.n	8002a0e <UART_SetConfig+0x1a2>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d814      	bhi.n	8002a26 <UART_SetConfig+0x1ba>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <UART_SetConfig+0x19a>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d008      	beq.n	8002a16 <UART_SetConfig+0x1aa>
 8002a04:	e00f      	b.n	8002a26 <UART_SetConfig+0x1ba>
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a0c:	e0ad      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a14:	e0a9      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a16:	2304      	movs	r3, #4
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a1c:	e0a5      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a24:	e0a1      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a26:	2310      	movs	r3, #16
 8002a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a2c:	e09d      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4a      	ldr	r2, [pc, #296]	; (8002b5c <UART_SetConfig+0x2f0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d125      	bne.n	8002a84 <UART_SetConfig+0x218>
 8002a38:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <UART_SetConfig+0x2e4>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a42:	2bc0      	cmp	r3, #192	; 0xc0
 8002a44:	d016      	beq.n	8002a74 <UART_SetConfig+0x208>
 8002a46:	2bc0      	cmp	r3, #192	; 0xc0
 8002a48:	d818      	bhi.n	8002a7c <UART_SetConfig+0x210>
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d00a      	beq.n	8002a64 <UART_SetConfig+0x1f8>
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d814      	bhi.n	8002a7c <UART_SetConfig+0x210>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <UART_SetConfig+0x1f0>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d008      	beq.n	8002a6c <UART_SetConfig+0x200>
 8002a5a:	e00f      	b.n	8002a7c <UART_SetConfig+0x210>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a62:	e082      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a64:	2302      	movs	r3, #2
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a6a:	e07e      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a72:	e07a      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a74:	2308      	movs	r3, #8
 8002a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a7a:	e076      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a82:	e072      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a35      	ldr	r2, [pc, #212]	; (8002b60 <UART_SetConfig+0x2f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12a      	bne.n	8002ae4 <UART_SetConfig+0x278>
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <UART_SetConfig+0x2e4>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a9c:	d01a      	beq.n	8002ad4 <UART_SetConfig+0x268>
 8002a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa2:	d81b      	bhi.n	8002adc <UART_SetConfig+0x270>
 8002aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa8:	d00c      	beq.n	8002ac4 <UART_SetConfig+0x258>
 8002aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aae:	d815      	bhi.n	8002adc <UART_SetConfig+0x270>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <UART_SetConfig+0x250>
 8002ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab8:	d008      	beq.n	8002acc <UART_SetConfig+0x260>
 8002aba:	e00f      	b.n	8002adc <UART_SetConfig+0x270>
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ac2:	e052      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aca:	e04e      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002acc:	2304      	movs	r3, #4
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ad2:	e04a      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ada:	e046      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002adc:	2310      	movs	r3, #16
 8002ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ae2:	e042      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <UART_SetConfig+0x2dc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d13a      	bne.n	8002b64 <UART_SetConfig+0x2f8>
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <UART_SetConfig+0x2e4>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002afc:	d01a      	beq.n	8002b34 <UART_SetConfig+0x2c8>
 8002afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b02:	d81b      	bhi.n	8002b3c <UART_SetConfig+0x2d0>
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b08:	d00c      	beq.n	8002b24 <UART_SetConfig+0x2b8>
 8002b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0e:	d815      	bhi.n	8002b3c <UART_SetConfig+0x2d0>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <UART_SetConfig+0x2b0>
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	d008      	beq.n	8002b2c <UART_SetConfig+0x2c0>
 8002b1a:	e00f      	b.n	8002b3c <UART_SetConfig+0x2d0>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b22:	e022      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002b24:	2302      	movs	r3, #2
 8002b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b2a:	e01e      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b32:	e01a      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002b34:	2308      	movs	r3, #8
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b3a:	e016      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b42:	e012      	b.n	8002b6a <UART_SetConfig+0x2fe>
 8002b44:	cfff69f3 	.word	0xcfff69f3
 8002b48:	40008000 	.word	0x40008000
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40004800 	.word	0x40004800
 8002b5c:	40004c00 	.word	0x40004c00
 8002b60:	40005000 	.word	0x40005000
 8002b64:	2310      	movs	r3, #16
 8002b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4aae      	ldr	r2, [pc, #696]	; (8002e28 <UART_SetConfig+0x5bc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	f040 8097 	bne.w	8002ca4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d823      	bhi.n	8002bc6 <UART_SetConfig+0x35a>
 8002b7e:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <UART_SetConfig+0x318>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002ba9 	.word	0x08002ba9
 8002b88:	08002bc7 	.word	0x08002bc7
 8002b8c:	08002bb1 	.word	0x08002bb1
 8002b90:	08002bc7 	.word	0x08002bc7
 8002b94:	08002bb7 	.word	0x08002bb7
 8002b98:	08002bc7 	.word	0x08002bc7
 8002b9c:	08002bc7 	.word	0x08002bc7
 8002ba0:	08002bc7 	.word	0x08002bc7
 8002ba4:	08002bbf 	.word	0x08002bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f7ff faba 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bae:	e010      	b.n	8002bd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb0:	4b9e      	ldr	r3, [pc, #632]	; (8002e2c <UART_SetConfig+0x5c0>)
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bb4:	e00d      	b.n	8002bd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7ff fa45 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bbc:	e009      	b.n	8002bd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bc4:	e005      	b.n	8002bd2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8130 	beq.w	8002e3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	4a94      	ldr	r2, [pc, #592]	; (8002e30 <UART_SetConfig+0x5c4>)
 8002be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d305      	bcc.n	8002c0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d903      	bls.n	8002c12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002c10:	e113      	b.n	8002e3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2200      	movs	r2, #0
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	60fa      	str	r2, [r7, #12]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	4a84      	ldr	r2, [pc, #528]	; (8002e30 <UART_SetConfig+0x5c4>)
 8002c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2200      	movs	r2, #0
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c34:	f7fd fb44 	bl	80002c0 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	020b      	lsls	r3, r1, #8
 8002c4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c4e:	0202      	lsls	r2, r0, #8
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	6849      	ldr	r1, [r1, #4]
 8002c54:	0849      	lsrs	r1, r1, #1
 8002c56:	2000      	movs	r0, #0
 8002c58:	460c      	mov	r4, r1
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	eb12 0804 	adds.w	r8, r2, r4
 8002c60:	eb43 0905 	adc.w	r9, r3, r5
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	469a      	mov	sl, r3
 8002c6c:	4693      	mov	fp, r2
 8002c6e:	4652      	mov	r2, sl
 8002c70:	465b      	mov	r3, fp
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f7fd fb23 	bl	80002c0 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4613      	mov	r3, r2
 8002c80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c88:	d308      	bcc.n	8002c9c <UART_SetConfig+0x430>
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c90:	d204      	bcs.n	8002c9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	e0ce      	b.n	8002e3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ca2:	e0ca      	b.n	8002e3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cac:	d166      	bne.n	8002d7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d827      	bhi.n	8002d06 <UART_SetConfig+0x49a>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x450>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002d07 	.word	0x08002d07
 8002ccc:	08002cf7 	.word	0x08002cf7
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d07 	.word	0x08002d07
 8002cd8:	08002d07 	.word	0x08002d07
 8002cdc:	08002cff 	.word	0x08002cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7ff fa1e 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ce6:	e014      	b.n	8002d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff fa30 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cee:	e010      	b.n	8002d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <UART_SetConfig+0x5c0>)
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002cf4:	e00d      	b.n	8002d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7ff f9a5 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cfc:	e009      	b.n	8002d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d04:	e005      	b.n	8002d12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8090 	beq.w	8002e3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	4a44      	ldr	r2, [pc, #272]	; (8002e30 <UART_SetConfig+0x5c4>)
 8002d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d24:	461a      	mov	r2, r3
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2c:	005a      	lsls	r2, r3, #1
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	441a      	add	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	d916      	bls.n	8002d74 <UART_SetConfig+0x508>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d212      	bcs.n	8002d74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f023 030f 	bic.w	r3, r3, #15
 8002d56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	8bfb      	ldrh	r3, [r7, #30]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	8bfa      	ldrh	r2, [r7, #30]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	e062      	b.n	8002e3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d7a:	e05e      	b.n	8002e3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d828      	bhi.n	8002dd6 <UART_SetConfig+0x56a>
 8002d84:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <UART_SetConfig+0x520>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002db9 	.word	0x08002db9
 8002d94:	08002dc1 	.word	0x08002dc1
 8002d98:	08002dd7 	.word	0x08002dd7
 8002d9c:	08002dc7 	.word	0x08002dc7
 8002da0:	08002dd7 	.word	0x08002dd7
 8002da4:	08002dd7 	.word	0x08002dd7
 8002da8:	08002dd7 	.word	0x08002dd7
 8002dac:	08002dcf 	.word	0x08002dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db0:	f7ff f9b6 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002db6:	e014      	b.n	8002de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db8:	f7ff f9c8 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dbe:	e010      	b.n	8002de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <UART_SetConfig+0x5c0>)
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dc4:	e00d      	b.n	8002de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc6:	f7ff f93d 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dcc:	e009      	b.n	8002de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dd4:	e005      	b.n	8002de2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002de0:	bf00      	nop
    }

    if (pclk != 0U)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d028      	beq.n	8002e3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <UART_SetConfig+0x5c4>)
 8002dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d910      	bls.n	8002e34 <UART_SetConfig+0x5c8>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e18:	d20c      	bcs.n	8002e34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	e009      	b.n	8002e3a <UART_SetConfig+0x5ce>
 8002e26:	bf00      	nop
 8002e28:	40008000 	.word	0x40008000
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	08003d4c 	.word	0x08003d4c
      }
      else
      {
        ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002e56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3730      	adds	r7, #48	; 0x30
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01a      	beq.n	8002f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f62:	d10a      	bne.n	8002f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb8:	f7fd fe4a 	bl	8000c50 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d10e      	bne.n	8002fea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f82f 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e025      	b.n	8003036 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d10e      	bne.n	8003016 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f819 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e00f      	b.n	8003036 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b09c      	sub	sp, #112	; 0x70
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	e0a9      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003056:	f000 80a5 	beq.w	80031a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fd fdf9 	bl	8000c50 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <UART_WaitOnFlagUntilTimeout+0x32>
 800306a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306c:	2b00      	cmp	r3, #0
 800306e:	d140      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003084:	667b      	str	r3, [r7, #100]	; 0x64
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800308e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003090:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800309c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e6      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3308      	adds	r3, #8
 80030c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80030c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e5      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e069      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d051      	beq.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d149      	bne.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003118:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800312e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
 800313a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800313e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e6      	bne.n	800311a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3308      	adds	r3, #8
 8003152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	613b      	str	r3, [r7, #16]
   return(result);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	66bb      	str	r3, [r7, #104]	; 0x68
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800316c:	623a      	str	r2, [r7, #32]
 800316e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	69f9      	ldr	r1, [r7, #28]
 8003172:	6a3a      	ldr	r2, [r7, #32]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	61bb      	str	r3, [r7, #24]
   return(result);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e010      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	429a      	cmp	r2, r3
 80031c0:	f43f af46 	beq.w	8003050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3770      	adds	r7, #112	; 0x70
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e027      	b.n	8003234 <HAL_UARTEx_DisableFifoMode+0x66>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	; 0x24
 80031f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003212:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e02d      	b.n	80032b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f84f 	bl	8003338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e02d      	b.n	8003330 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f811 	bl	8003338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003358:	e031      	b.n	80033be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800335a:	2308      	movs	r3, #8
 800335c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800335e:	2308      	movs	r3, #8
 8003360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	0e5b      	lsrs	r3, r3, #25
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	0f5b      	lsrs	r3, r3, #29
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003382:	7bbb      	ldrb	r3, [r7, #14]
 8003384:	7b3a      	ldrb	r2, [r7, #12]
 8003386:	4911      	ldr	r1, [pc, #68]	; (80033cc <UARTEx_SetNbDataToProcess+0x94>)
 8003388:	5c8a      	ldrb	r2, [r1, r2]
 800338a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800338e:	7b3a      	ldrb	r2, [r7, #12]
 8003390:	490f      	ldr	r1, [pc, #60]	; (80033d0 <UARTEx_SetNbDataToProcess+0x98>)
 8003392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003394:	fb93 f3f2 	sdiv	r3, r3, r2
 8003398:	b29a      	uxth	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	7b7a      	ldrb	r2, [r7, #13]
 80033a4:	4909      	ldr	r1, [pc, #36]	; (80033cc <UARTEx_SetNbDataToProcess+0x94>)
 80033a6:	5c8a      	ldrb	r2, [r1, r2]
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80033ac:	7b7a      	ldrb	r2, [r7, #13]
 80033ae:	4908      	ldr	r1, [pc, #32]	; (80033d0 <UARTEx_SetNbDataToProcess+0x98>)
 80033b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	08003d64 	.word	0x08003d64
 80033d0:	08003d6c 	.word	0x08003d6c

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000038 	.word	0x20000038

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d0d      	ldr	r5, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2600      	movs	r6, #0
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4d0b      	ldr	r5, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 fc8e 	bl	8003d14 <_init>
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2600      	movs	r6, #0
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003db0 	.word	0x08003db0
 800341c:	08003db0 	.word	0x08003db0
 8003420:	08003db0 	.word	0x08003db0
 8003424:	08003db4 	.word	0x08003db4

08003428 <memset>:
 8003428:	4402      	add	r2, r0
 800342a:	4603      	mov	r3, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <siprintf>:
 8003438:	b40e      	push	{r1, r2, r3}
 800343a:	b500      	push	{lr}
 800343c:	b09c      	sub	sp, #112	; 0x70
 800343e:	ab1d      	add	r3, sp, #116	; 0x74
 8003440:	9002      	str	r0, [sp, #8]
 8003442:	9006      	str	r0, [sp, #24]
 8003444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003448:	4809      	ldr	r0, [pc, #36]	; (8003470 <siprintf+0x38>)
 800344a:	9107      	str	r1, [sp, #28]
 800344c:	9104      	str	r1, [sp, #16]
 800344e:	4909      	ldr	r1, [pc, #36]	; (8003474 <siprintf+0x3c>)
 8003450:	f853 2b04 	ldr.w	r2, [r3], #4
 8003454:	9105      	str	r1, [sp, #20]
 8003456:	6800      	ldr	r0, [r0, #0]
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	a902      	add	r1, sp, #8
 800345c:	f000 f868 	bl	8003530 <_svfiprintf_r>
 8003460:	9b02      	ldr	r3, [sp, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	b01c      	add	sp, #112	; 0x70
 8003468:	f85d eb04 	ldr.w	lr, [sp], #4
 800346c:	b003      	add	sp, #12
 800346e:	4770      	bx	lr
 8003470:	20000038 	.word	0x20000038
 8003474:	ffff0208 	.word	0xffff0208

08003478 <__ssputs_r>:
 8003478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800347c:	688e      	ldr	r6, [r1, #8]
 800347e:	429e      	cmp	r6, r3
 8003480:	4682      	mov	sl, r0
 8003482:	460c      	mov	r4, r1
 8003484:	4690      	mov	r8, r2
 8003486:	461f      	mov	r7, r3
 8003488:	d838      	bhi.n	80034fc <__ssputs_r+0x84>
 800348a:	898a      	ldrh	r2, [r1, #12]
 800348c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003490:	d032      	beq.n	80034f8 <__ssputs_r+0x80>
 8003492:	6825      	ldr	r5, [r4, #0]
 8003494:	6909      	ldr	r1, [r1, #16]
 8003496:	eba5 0901 	sub.w	r9, r5, r1
 800349a:	6965      	ldr	r5, [r4, #20]
 800349c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034a4:	3301      	adds	r3, #1
 80034a6:	444b      	add	r3, r9
 80034a8:	106d      	asrs	r5, r5, #1
 80034aa:	429d      	cmp	r5, r3
 80034ac:	bf38      	it	cc
 80034ae:	461d      	movcc	r5, r3
 80034b0:	0553      	lsls	r3, r2, #21
 80034b2:	d531      	bpl.n	8003518 <__ssputs_r+0xa0>
 80034b4:	4629      	mov	r1, r5
 80034b6:	f000 fb63 	bl	8003b80 <_malloc_r>
 80034ba:	4606      	mov	r6, r0
 80034bc:	b950      	cbnz	r0, 80034d4 <__ssputs_r+0x5c>
 80034be:	230c      	movs	r3, #12
 80034c0:	f8ca 3000 	str.w	r3, [sl]
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ca:	81a3      	strh	r3, [r4, #12]
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d4:	6921      	ldr	r1, [r4, #16]
 80034d6:	464a      	mov	r2, r9
 80034d8:	f000 fabe 	bl	8003a58 <memcpy>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	6126      	str	r6, [r4, #16]
 80034ea:	6165      	str	r5, [r4, #20]
 80034ec:	444e      	add	r6, r9
 80034ee:	eba5 0509 	sub.w	r5, r5, r9
 80034f2:	6026      	str	r6, [r4, #0]
 80034f4:	60a5      	str	r5, [r4, #8]
 80034f6:	463e      	mov	r6, r7
 80034f8:	42be      	cmp	r6, r7
 80034fa:	d900      	bls.n	80034fe <__ssputs_r+0x86>
 80034fc:	463e      	mov	r6, r7
 80034fe:	6820      	ldr	r0, [r4, #0]
 8003500:	4632      	mov	r2, r6
 8003502:	4641      	mov	r1, r8
 8003504:	f000 fab6 	bl	8003a74 <memmove>
 8003508:	68a3      	ldr	r3, [r4, #8]
 800350a:	1b9b      	subs	r3, r3, r6
 800350c:	60a3      	str	r3, [r4, #8]
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	4433      	add	r3, r6
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	2000      	movs	r0, #0
 8003516:	e7db      	b.n	80034d0 <__ssputs_r+0x58>
 8003518:	462a      	mov	r2, r5
 800351a:	f000 fba5 	bl	8003c68 <_realloc_r>
 800351e:	4606      	mov	r6, r0
 8003520:	2800      	cmp	r0, #0
 8003522:	d1e1      	bne.n	80034e8 <__ssputs_r+0x70>
 8003524:	6921      	ldr	r1, [r4, #16]
 8003526:	4650      	mov	r0, sl
 8003528:	f000 fabe 	bl	8003aa8 <_free_r>
 800352c:	e7c7      	b.n	80034be <__ssputs_r+0x46>
	...

08003530 <_svfiprintf_r>:
 8003530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003534:	4698      	mov	r8, r3
 8003536:	898b      	ldrh	r3, [r1, #12]
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	b09d      	sub	sp, #116	; 0x74
 800353c:	4607      	mov	r7, r0
 800353e:	460d      	mov	r5, r1
 8003540:	4614      	mov	r4, r2
 8003542:	d50e      	bpl.n	8003562 <_svfiprintf_r+0x32>
 8003544:	690b      	ldr	r3, [r1, #16]
 8003546:	b963      	cbnz	r3, 8003562 <_svfiprintf_r+0x32>
 8003548:	2140      	movs	r1, #64	; 0x40
 800354a:	f000 fb19 	bl	8003b80 <_malloc_r>
 800354e:	6028      	str	r0, [r5, #0]
 8003550:	6128      	str	r0, [r5, #16]
 8003552:	b920      	cbnz	r0, 800355e <_svfiprintf_r+0x2e>
 8003554:	230c      	movs	r3, #12
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800355c:	e0d1      	b.n	8003702 <_svfiprintf_r+0x1d2>
 800355e:	2340      	movs	r3, #64	; 0x40
 8003560:	616b      	str	r3, [r5, #20]
 8003562:	2300      	movs	r3, #0
 8003564:	9309      	str	r3, [sp, #36]	; 0x24
 8003566:	2320      	movs	r3, #32
 8003568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800356c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003570:	2330      	movs	r3, #48	; 0x30
 8003572:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800371c <_svfiprintf_r+0x1ec>
 8003576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800357a:	f04f 0901 	mov.w	r9, #1
 800357e:	4623      	mov	r3, r4
 8003580:	469a      	mov	sl, r3
 8003582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003586:	b10a      	cbz	r2, 800358c <_svfiprintf_r+0x5c>
 8003588:	2a25      	cmp	r2, #37	; 0x25
 800358a:	d1f9      	bne.n	8003580 <_svfiprintf_r+0x50>
 800358c:	ebba 0b04 	subs.w	fp, sl, r4
 8003590:	d00b      	beq.n	80035aa <_svfiprintf_r+0x7a>
 8003592:	465b      	mov	r3, fp
 8003594:	4622      	mov	r2, r4
 8003596:	4629      	mov	r1, r5
 8003598:	4638      	mov	r0, r7
 800359a:	f7ff ff6d 	bl	8003478 <__ssputs_r>
 800359e:	3001      	adds	r0, #1
 80035a0:	f000 80aa 	beq.w	80036f8 <_svfiprintf_r+0x1c8>
 80035a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035a6:	445a      	add	r2, fp
 80035a8:	9209      	str	r2, [sp, #36]	; 0x24
 80035aa:	f89a 3000 	ldrb.w	r3, [sl]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a2 	beq.w	80036f8 <_svfiprintf_r+0x1c8>
 80035b4:	2300      	movs	r3, #0
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035be:	f10a 0a01 	add.w	sl, sl, #1
 80035c2:	9304      	str	r3, [sp, #16]
 80035c4:	9307      	str	r3, [sp, #28]
 80035c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ca:	931a      	str	r3, [sp, #104]	; 0x68
 80035cc:	4654      	mov	r4, sl
 80035ce:	2205      	movs	r2, #5
 80035d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d4:	4851      	ldr	r0, [pc, #324]	; (800371c <_svfiprintf_r+0x1ec>)
 80035d6:	f7fc fe23 	bl	8000220 <memchr>
 80035da:	9a04      	ldr	r2, [sp, #16]
 80035dc:	b9d8      	cbnz	r0, 8003616 <_svfiprintf_r+0xe6>
 80035de:	06d0      	lsls	r0, r2, #27
 80035e0:	bf44      	itt	mi
 80035e2:	2320      	movmi	r3, #32
 80035e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035e8:	0711      	lsls	r1, r2, #28
 80035ea:	bf44      	itt	mi
 80035ec:	232b      	movmi	r3, #43	; 0x2b
 80035ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035f2:	f89a 3000 	ldrb.w	r3, [sl]
 80035f6:	2b2a      	cmp	r3, #42	; 0x2a
 80035f8:	d015      	beq.n	8003626 <_svfiprintf_r+0xf6>
 80035fa:	9a07      	ldr	r2, [sp, #28]
 80035fc:	4654      	mov	r4, sl
 80035fe:	2000      	movs	r0, #0
 8003600:	f04f 0c0a 	mov.w	ip, #10
 8003604:	4621      	mov	r1, r4
 8003606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800360a:	3b30      	subs	r3, #48	; 0x30
 800360c:	2b09      	cmp	r3, #9
 800360e:	d94e      	bls.n	80036ae <_svfiprintf_r+0x17e>
 8003610:	b1b0      	cbz	r0, 8003640 <_svfiprintf_r+0x110>
 8003612:	9207      	str	r2, [sp, #28]
 8003614:	e014      	b.n	8003640 <_svfiprintf_r+0x110>
 8003616:	eba0 0308 	sub.w	r3, r0, r8
 800361a:	fa09 f303 	lsl.w	r3, r9, r3
 800361e:	4313      	orrs	r3, r2
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	46a2      	mov	sl, r4
 8003624:	e7d2      	b.n	80035cc <_svfiprintf_r+0x9c>
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	1d19      	adds	r1, r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	9103      	str	r1, [sp, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	bfbb      	ittet	lt
 8003632:	425b      	neglt	r3, r3
 8003634:	f042 0202 	orrlt.w	r2, r2, #2
 8003638:	9307      	strge	r3, [sp, #28]
 800363a:	9307      	strlt	r3, [sp, #28]
 800363c:	bfb8      	it	lt
 800363e:	9204      	strlt	r2, [sp, #16]
 8003640:	7823      	ldrb	r3, [r4, #0]
 8003642:	2b2e      	cmp	r3, #46	; 0x2e
 8003644:	d10c      	bne.n	8003660 <_svfiprintf_r+0x130>
 8003646:	7863      	ldrb	r3, [r4, #1]
 8003648:	2b2a      	cmp	r3, #42	; 0x2a
 800364a:	d135      	bne.n	80036b8 <_svfiprintf_r+0x188>
 800364c:	9b03      	ldr	r3, [sp, #12]
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	9203      	str	r2, [sp, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	bfb8      	it	lt
 8003658:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800365c:	3402      	adds	r4, #2
 800365e:	9305      	str	r3, [sp, #20]
 8003660:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800372c <_svfiprintf_r+0x1fc>
 8003664:	7821      	ldrb	r1, [r4, #0]
 8003666:	2203      	movs	r2, #3
 8003668:	4650      	mov	r0, sl
 800366a:	f7fc fdd9 	bl	8000220 <memchr>
 800366e:	b140      	cbz	r0, 8003682 <_svfiprintf_r+0x152>
 8003670:	2340      	movs	r3, #64	; 0x40
 8003672:	eba0 000a 	sub.w	r0, r0, sl
 8003676:	fa03 f000 	lsl.w	r0, r3, r0
 800367a:	9b04      	ldr	r3, [sp, #16]
 800367c:	4303      	orrs	r3, r0
 800367e:	3401      	adds	r4, #1
 8003680:	9304      	str	r3, [sp, #16]
 8003682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003686:	4826      	ldr	r0, [pc, #152]	; (8003720 <_svfiprintf_r+0x1f0>)
 8003688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800368c:	2206      	movs	r2, #6
 800368e:	f7fc fdc7 	bl	8000220 <memchr>
 8003692:	2800      	cmp	r0, #0
 8003694:	d038      	beq.n	8003708 <_svfiprintf_r+0x1d8>
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <_svfiprintf_r+0x1f4>)
 8003698:	bb1b      	cbnz	r3, 80036e2 <_svfiprintf_r+0x1b2>
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	3307      	adds	r3, #7
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	3308      	adds	r3, #8
 80036a4:	9303      	str	r3, [sp, #12]
 80036a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a8:	4433      	add	r3, r6
 80036aa:	9309      	str	r3, [sp, #36]	; 0x24
 80036ac:	e767      	b.n	800357e <_svfiprintf_r+0x4e>
 80036ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80036b2:	460c      	mov	r4, r1
 80036b4:	2001      	movs	r0, #1
 80036b6:	e7a5      	b.n	8003604 <_svfiprintf_r+0xd4>
 80036b8:	2300      	movs	r3, #0
 80036ba:	3401      	adds	r4, #1
 80036bc:	9305      	str	r3, [sp, #20]
 80036be:	4619      	mov	r1, r3
 80036c0:	f04f 0c0a 	mov.w	ip, #10
 80036c4:	4620      	mov	r0, r4
 80036c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ca:	3a30      	subs	r2, #48	; 0x30
 80036cc:	2a09      	cmp	r2, #9
 80036ce:	d903      	bls.n	80036d8 <_svfiprintf_r+0x1a8>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0c5      	beq.n	8003660 <_svfiprintf_r+0x130>
 80036d4:	9105      	str	r1, [sp, #20]
 80036d6:	e7c3      	b.n	8003660 <_svfiprintf_r+0x130>
 80036d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80036dc:	4604      	mov	r4, r0
 80036de:	2301      	movs	r3, #1
 80036e0:	e7f0      	b.n	80036c4 <_svfiprintf_r+0x194>
 80036e2:	ab03      	add	r3, sp, #12
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	462a      	mov	r2, r5
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <_svfiprintf_r+0x1f8>)
 80036ea:	a904      	add	r1, sp, #16
 80036ec:	4638      	mov	r0, r7
 80036ee:	f3af 8000 	nop.w
 80036f2:	1c42      	adds	r2, r0, #1
 80036f4:	4606      	mov	r6, r0
 80036f6:	d1d6      	bne.n	80036a6 <_svfiprintf_r+0x176>
 80036f8:	89ab      	ldrh	r3, [r5, #12]
 80036fa:	065b      	lsls	r3, r3, #25
 80036fc:	f53f af2c 	bmi.w	8003558 <_svfiprintf_r+0x28>
 8003700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003702:	b01d      	add	sp, #116	; 0x74
 8003704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003708:	ab03      	add	r3, sp, #12
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	462a      	mov	r2, r5
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <_svfiprintf_r+0x1f8>)
 8003710:	a904      	add	r1, sp, #16
 8003712:	4638      	mov	r0, r7
 8003714:	f000 f87a 	bl	800380c <_printf_i>
 8003718:	e7eb      	b.n	80036f2 <_svfiprintf_r+0x1c2>
 800371a:	bf00      	nop
 800371c:	08003d74 	.word	0x08003d74
 8003720:	08003d7e 	.word	0x08003d7e
 8003724:	00000000 	.word	0x00000000
 8003728:	08003479 	.word	0x08003479
 800372c:	08003d7a 	.word	0x08003d7a

08003730 <_printf_common>:
 8003730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	4616      	mov	r6, r2
 8003736:	4699      	mov	r9, r3
 8003738:	688a      	ldr	r2, [r1, #8]
 800373a:	690b      	ldr	r3, [r1, #16]
 800373c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003740:	4293      	cmp	r3, r2
 8003742:	bfb8      	it	lt
 8003744:	4613      	movlt	r3, r2
 8003746:	6033      	str	r3, [r6, #0]
 8003748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800374c:	4607      	mov	r7, r0
 800374e:	460c      	mov	r4, r1
 8003750:	b10a      	cbz	r2, 8003756 <_printf_common+0x26>
 8003752:	3301      	adds	r3, #1
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	0699      	lsls	r1, r3, #26
 800375a:	bf42      	ittt	mi
 800375c:	6833      	ldrmi	r3, [r6, #0]
 800375e:	3302      	addmi	r3, #2
 8003760:	6033      	strmi	r3, [r6, #0]
 8003762:	6825      	ldr	r5, [r4, #0]
 8003764:	f015 0506 	ands.w	r5, r5, #6
 8003768:	d106      	bne.n	8003778 <_printf_common+0x48>
 800376a:	f104 0a19 	add.w	sl, r4, #25
 800376e:	68e3      	ldr	r3, [r4, #12]
 8003770:	6832      	ldr	r2, [r6, #0]
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	42ab      	cmp	r3, r5
 8003776:	dc26      	bgt.n	80037c6 <_printf_common+0x96>
 8003778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800377c:	1e13      	subs	r3, r2, #0
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	bf18      	it	ne
 8003782:	2301      	movne	r3, #1
 8003784:	0692      	lsls	r2, r2, #26
 8003786:	d42b      	bmi.n	80037e0 <_printf_common+0xb0>
 8003788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800378c:	4649      	mov	r1, r9
 800378e:	4638      	mov	r0, r7
 8003790:	47c0      	blx	r8
 8003792:	3001      	adds	r0, #1
 8003794:	d01e      	beq.n	80037d4 <_printf_common+0xa4>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	68e5      	ldr	r5, [r4, #12]
 800379a:	6832      	ldr	r2, [r6, #0]
 800379c:	f003 0306 	and.w	r3, r3, #6
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	bf08      	it	eq
 80037a4:	1aad      	subeq	r5, r5, r2
 80037a6:	68a3      	ldr	r3, [r4, #8]
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	bf0c      	ite	eq
 80037ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037b0:	2500      	movne	r5, #0
 80037b2:	4293      	cmp	r3, r2
 80037b4:	bfc4      	itt	gt
 80037b6:	1a9b      	subgt	r3, r3, r2
 80037b8:	18ed      	addgt	r5, r5, r3
 80037ba:	2600      	movs	r6, #0
 80037bc:	341a      	adds	r4, #26
 80037be:	42b5      	cmp	r5, r6
 80037c0:	d11a      	bne.n	80037f8 <_printf_common+0xc8>
 80037c2:	2000      	movs	r0, #0
 80037c4:	e008      	b.n	80037d8 <_printf_common+0xa8>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4652      	mov	r2, sl
 80037ca:	4649      	mov	r1, r9
 80037cc:	4638      	mov	r0, r7
 80037ce:	47c0      	blx	r8
 80037d0:	3001      	adds	r0, #1
 80037d2:	d103      	bne.n	80037dc <_printf_common+0xac>
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037dc:	3501      	adds	r5, #1
 80037de:	e7c6      	b.n	800376e <_printf_common+0x3e>
 80037e0:	18e1      	adds	r1, r4, r3
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	2030      	movs	r0, #48	; 0x30
 80037e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ea:	4422      	add	r2, r4
 80037ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f4:	3302      	adds	r3, #2
 80037f6:	e7c7      	b.n	8003788 <_printf_common+0x58>
 80037f8:	2301      	movs	r3, #1
 80037fa:	4622      	mov	r2, r4
 80037fc:	4649      	mov	r1, r9
 80037fe:	4638      	mov	r0, r7
 8003800:	47c0      	blx	r8
 8003802:	3001      	adds	r0, #1
 8003804:	d0e6      	beq.n	80037d4 <_printf_common+0xa4>
 8003806:	3601      	adds	r6, #1
 8003808:	e7d9      	b.n	80037be <_printf_common+0x8e>
	...

0800380c <_printf_i>:
 800380c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003810:	7e0f      	ldrb	r7, [r1, #24]
 8003812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003814:	2f78      	cmp	r7, #120	; 0x78
 8003816:	4691      	mov	r9, r2
 8003818:	4680      	mov	r8, r0
 800381a:	460c      	mov	r4, r1
 800381c:	469a      	mov	sl, r3
 800381e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003822:	d807      	bhi.n	8003834 <_printf_i+0x28>
 8003824:	2f62      	cmp	r7, #98	; 0x62
 8003826:	d80a      	bhi.n	800383e <_printf_i+0x32>
 8003828:	2f00      	cmp	r7, #0
 800382a:	f000 80d8 	beq.w	80039de <_printf_i+0x1d2>
 800382e:	2f58      	cmp	r7, #88	; 0x58
 8003830:	f000 80a3 	beq.w	800397a <_printf_i+0x16e>
 8003834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800383c:	e03a      	b.n	80038b4 <_printf_i+0xa8>
 800383e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003842:	2b15      	cmp	r3, #21
 8003844:	d8f6      	bhi.n	8003834 <_printf_i+0x28>
 8003846:	a101      	add	r1, pc, #4	; (adr r1, 800384c <_printf_i+0x40>)
 8003848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800384c:	080038a5 	.word	0x080038a5
 8003850:	080038b9 	.word	0x080038b9
 8003854:	08003835 	.word	0x08003835
 8003858:	08003835 	.word	0x08003835
 800385c:	08003835 	.word	0x08003835
 8003860:	08003835 	.word	0x08003835
 8003864:	080038b9 	.word	0x080038b9
 8003868:	08003835 	.word	0x08003835
 800386c:	08003835 	.word	0x08003835
 8003870:	08003835 	.word	0x08003835
 8003874:	08003835 	.word	0x08003835
 8003878:	080039c5 	.word	0x080039c5
 800387c:	080038e9 	.word	0x080038e9
 8003880:	080039a7 	.word	0x080039a7
 8003884:	08003835 	.word	0x08003835
 8003888:	08003835 	.word	0x08003835
 800388c:	080039e7 	.word	0x080039e7
 8003890:	08003835 	.word	0x08003835
 8003894:	080038e9 	.word	0x080038e9
 8003898:	08003835 	.word	0x08003835
 800389c:	08003835 	.word	0x08003835
 80038a0:	080039af 	.word	0x080039af
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	602a      	str	r2, [r5, #0]
 80038ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0a3      	b.n	8003a00 <_printf_i+0x1f4>
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	6829      	ldr	r1, [r5, #0]
 80038bc:	0606      	lsls	r6, r0, #24
 80038be:	f101 0304 	add.w	r3, r1, #4
 80038c2:	d50a      	bpl.n	80038da <_printf_i+0xce>
 80038c4:	680e      	ldr	r6, [r1, #0]
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	2e00      	cmp	r6, #0
 80038ca:	da03      	bge.n	80038d4 <_printf_i+0xc8>
 80038cc:	232d      	movs	r3, #45	; 0x2d
 80038ce:	4276      	negs	r6, r6
 80038d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d4:	485e      	ldr	r0, [pc, #376]	; (8003a50 <_printf_i+0x244>)
 80038d6:	230a      	movs	r3, #10
 80038d8:	e019      	b.n	800390e <_printf_i+0x102>
 80038da:	680e      	ldr	r6, [r1, #0]
 80038dc:	602b      	str	r3, [r5, #0]
 80038de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038e2:	bf18      	it	ne
 80038e4:	b236      	sxthne	r6, r6
 80038e6:	e7ef      	b.n	80038c8 <_printf_i+0xbc>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	1d19      	adds	r1, r3, #4
 80038ee:	6029      	str	r1, [r5, #0]
 80038f0:	0601      	lsls	r1, r0, #24
 80038f2:	d501      	bpl.n	80038f8 <_printf_i+0xec>
 80038f4:	681e      	ldr	r6, [r3, #0]
 80038f6:	e002      	b.n	80038fe <_printf_i+0xf2>
 80038f8:	0646      	lsls	r6, r0, #25
 80038fa:	d5fb      	bpl.n	80038f4 <_printf_i+0xe8>
 80038fc:	881e      	ldrh	r6, [r3, #0]
 80038fe:	4854      	ldr	r0, [pc, #336]	; (8003a50 <_printf_i+0x244>)
 8003900:	2f6f      	cmp	r7, #111	; 0x6f
 8003902:	bf0c      	ite	eq
 8003904:	2308      	moveq	r3, #8
 8003906:	230a      	movne	r3, #10
 8003908:	2100      	movs	r1, #0
 800390a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800390e:	6865      	ldr	r5, [r4, #4]
 8003910:	60a5      	str	r5, [r4, #8]
 8003912:	2d00      	cmp	r5, #0
 8003914:	bfa2      	ittt	ge
 8003916:	6821      	ldrge	r1, [r4, #0]
 8003918:	f021 0104 	bicge.w	r1, r1, #4
 800391c:	6021      	strge	r1, [r4, #0]
 800391e:	b90e      	cbnz	r6, 8003924 <_printf_i+0x118>
 8003920:	2d00      	cmp	r5, #0
 8003922:	d04d      	beq.n	80039c0 <_printf_i+0x1b4>
 8003924:	4615      	mov	r5, r2
 8003926:	fbb6 f1f3 	udiv	r1, r6, r3
 800392a:	fb03 6711 	mls	r7, r3, r1, r6
 800392e:	5dc7      	ldrb	r7, [r0, r7]
 8003930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003934:	4637      	mov	r7, r6
 8003936:	42bb      	cmp	r3, r7
 8003938:	460e      	mov	r6, r1
 800393a:	d9f4      	bls.n	8003926 <_printf_i+0x11a>
 800393c:	2b08      	cmp	r3, #8
 800393e:	d10b      	bne.n	8003958 <_printf_i+0x14c>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	07de      	lsls	r6, r3, #31
 8003944:	d508      	bpl.n	8003958 <_printf_i+0x14c>
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	6861      	ldr	r1, [r4, #4]
 800394a:	4299      	cmp	r1, r3
 800394c:	bfde      	ittt	le
 800394e:	2330      	movle	r3, #48	; 0x30
 8003950:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003954:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003958:	1b52      	subs	r2, r2, r5
 800395a:	6122      	str	r2, [r4, #16]
 800395c:	f8cd a000 	str.w	sl, [sp]
 8003960:	464b      	mov	r3, r9
 8003962:	aa03      	add	r2, sp, #12
 8003964:	4621      	mov	r1, r4
 8003966:	4640      	mov	r0, r8
 8003968:	f7ff fee2 	bl	8003730 <_printf_common>
 800396c:	3001      	adds	r0, #1
 800396e:	d14c      	bne.n	8003a0a <_printf_i+0x1fe>
 8003970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003974:	b004      	add	sp, #16
 8003976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397a:	4835      	ldr	r0, [pc, #212]	; (8003a50 <_printf_i+0x244>)
 800397c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003980:	6829      	ldr	r1, [r5, #0]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	f851 6b04 	ldr.w	r6, [r1], #4
 8003988:	6029      	str	r1, [r5, #0]
 800398a:	061d      	lsls	r5, r3, #24
 800398c:	d514      	bpl.n	80039b8 <_printf_i+0x1ac>
 800398e:	07df      	lsls	r7, r3, #31
 8003990:	bf44      	itt	mi
 8003992:	f043 0320 	orrmi.w	r3, r3, #32
 8003996:	6023      	strmi	r3, [r4, #0]
 8003998:	b91e      	cbnz	r6, 80039a2 <_printf_i+0x196>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f023 0320 	bic.w	r3, r3, #32
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	2310      	movs	r3, #16
 80039a4:	e7b0      	b.n	8003908 <_printf_i+0xfc>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	2378      	movs	r3, #120	; 0x78
 80039b0:	4828      	ldr	r0, [pc, #160]	; (8003a54 <_printf_i+0x248>)
 80039b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039b6:	e7e3      	b.n	8003980 <_printf_i+0x174>
 80039b8:	0659      	lsls	r1, r3, #25
 80039ba:	bf48      	it	mi
 80039bc:	b2b6      	uxthmi	r6, r6
 80039be:	e7e6      	b.n	800398e <_printf_i+0x182>
 80039c0:	4615      	mov	r5, r2
 80039c2:	e7bb      	b.n	800393c <_printf_i+0x130>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	6826      	ldr	r6, [r4, #0]
 80039c8:	6961      	ldr	r1, [r4, #20]
 80039ca:	1d18      	adds	r0, r3, #4
 80039cc:	6028      	str	r0, [r5, #0]
 80039ce:	0635      	lsls	r5, r6, #24
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	d501      	bpl.n	80039d8 <_printf_i+0x1cc>
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	e002      	b.n	80039de <_printf_i+0x1d2>
 80039d8:	0670      	lsls	r0, r6, #25
 80039da:	d5fb      	bpl.n	80039d4 <_printf_i+0x1c8>
 80039dc:	8019      	strh	r1, [r3, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	4615      	mov	r5, r2
 80039e4:	e7ba      	b.n	800395c <_printf_i+0x150>
 80039e6:	682b      	ldr	r3, [r5, #0]
 80039e8:	1d1a      	adds	r2, r3, #4
 80039ea:	602a      	str	r2, [r5, #0]
 80039ec:	681d      	ldr	r5, [r3, #0]
 80039ee:	6862      	ldr	r2, [r4, #4]
 80039f0:	2100      	movs	r1, #0
 80039f2:	4628      	mov	r0, r5
 80039f4:	f7fc fc14 	bl	8000220 <memchr>
 80039f8:	b108      	cbz	r0, 80039fe <_printf_i+0x1f2>
 80039fa:	1b40      	subs	r0, r0, r5
 80039fc:	6060      	str	r0, [r4, #4]
 80039fe:	6863      	ldr	r3, [r4, #4]
 8003a00:	6123      	str	r3, [r4, #16]
 8003a02:	2300      	movs	r3, #0
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a08:	e7a8      	b.n	800395c <_printf_i+0x150>
 8003a0a:	6923      	ldr	r3, [r4, #16]
 8003a0c:	462a      	mov	r2, r5
 8003a0e:	4649      	mov	r1, r9
 8003a10:	4640      	mov	r0, r8
 8003a12:	47d0      	blx	sl
 8003a14:	3001      	adds	r0, #1
 8003a16:	d0ab      	beq.n	8003970 <_printf_i+0x164>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	079b      	lsls	r3, r3, #30
 8003a1c:	d413      	bmi.n	8003a46 <_printf_i+0x23a>
 8003a1e:	68e0      	ldr	r0, [r4, #12]
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	4298      	cmp	r0, r3
 8003a24:	bfb8      	it	lt
 8003a26:	4618      	movlt	r0, r3
 8003a28:	e7a4      	b.n	8003974 <_printf_i+0x168>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4632      	mov	r2, r6
 8003a2e:	4649      	mov	r1, r9
 8003a30:	4640      	mov	r0, r8
 8003a32:	47d0      	blx	sl
 8003a34:	3001      	adds	r0, #1
 8003a36:	d09b      	beq.n	8003970 <_printf_i+0x164>
 8003a38:	3501      	adds	r5, #1
 8003a3a:	68e3      	ldr	r3, [r4, #12]
 8003a3c:	9903      	ldr	r1, [sp, #12]
 8003a3e:	1a5b      	subs	r3, r3, r1
 8003a40:	42ab      	cmp	r3, r5
 8003a42:	dcf2      	bgt.n	8003a2a <_printf_i+0x21e>
 8003a44:	e7eb      	b.n	8003a1e <_printf_i+0x212>
 8003a46:	2500      	movs	r5, #0
 8003a48:	f104 0619 	add.w	r6, r4, #25
 8003a4c:	e7f5      	b.n	8003a3a <_printf_i+0x22e>
 8003a4e:	bf00      	nop
 8003a50:	08003d85 	.word	0x08003d85
 8003a54:	08003d96 	.word	0x08003d96

08003a58 <memcpy>:
 8003a58:	440a      	add	r2, r1
 8003a5a:	4291      	cmp	r1, r2
 8003a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a60:	d100      	bne.n	8003a64 <memcpy+0xc>
 8003a62:	4770      	bx	lr
 8003a64:	b510      	push	{r4, lr}
 8003a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a6e:	4291      	cmp	r1, r2
 8003a70:	d1f9      	bne.n	8003a66 <memcpy+0xe>
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <memmove>:
 8003a74:	4288      	cmp	r0, r1
 8003a76:	b510      	push	{r4, lr}
 8003a78:	eb01 0402 	add.w	r4, r1, r2
 8003a7c:	d902      	bls.n	8003a84 <memmove+0x10>
 8003a7e:	4284      	cmp	r4, r0
 8003a80:	4623      	mov	r3, r4
 8003a82:	d807      	bhi.n	8003a94 <memmove+0x20>
 8003a84:	1e43      	subs	r3, r0, #1
 8003a86:	42a1      	cmp	r1, r4
 8003a88:	d008      	beq.n	8003a9c <memmove+0x28>
 8003a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a92:	e7f8      	b.n	8003a86 <memmove+0x12>
 8003a94:	4402      	add	r2, r0
 8003a96:	4601      	mov	r1, r0
 8003a98:	428a      	cmp	r2, r1
 8003a9a:	d100      	bne.n	8003a9e <memmove+0x2a>
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aa6:	e7f7      	b.n	8003a98 <memmove+0x24>

08003aa8 <_free_r>:
 8003aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	d044      	beq.n	8003b38 <_free_r+0x90>
 8003aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab2:	9001      	str	r0, [sp, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8003aba:	bfb8      	it	lt
 8003abc:	18e4      	addlt	r4, r4, r3
 8003abe:	f000 f913 	bl	8003ce8 <__malloc_lock>
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <_free_r+0x94>)
 8003ac4:	9801      	ldr	r0, [sp, #4]
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	b933      	cbnz	r3, 8003ad8 <_free_r+0x30>
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	6014      	str	r4, [r2, #0]
 8003ace:	b003      	add	sp, #12
 8003ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ad4:	f000 b90e 	b.w	8003cf4 <__malloc_unlock>
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	d908      	bls.n	8003aee <_free_r+0x46>
 8003adc:	6825      	ldr	r5, [r4, #0]
 8003ade:	1961      	adds	r1, r4, r5
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	bf01      	itttt	eq
 8003ae4:	6819      	ldreq	r1, [r3, #0]
 8003ae6:	685b      	ldreq	r3, [r3, #4]
 8003ae8:	1949      	addeq	r1, r1, r5
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	e7ed      	b.n	8003aca <_free_r+0x22>
 8003aee:	461a      	mov	r2, r3
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b10b      	cbz	r3, 8003af8 <_free_r+0x50>
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	d9fa      	bls.n	8003aee <_free_r+0x46>
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	1855      	adds	r5, r2, r1
 8003afc:	42a5      	cmp	r5, r4
 8003afe:	d10b      	bne.n	8003b18 <_free_r+0x70>
 8003b00:	6824      	ldr	r4, [r4, #0]
 8003b02:	4421      	add	r1, r4
 8003b04:	1854      	adds	r4, r2, r1
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	d1e0      	bne.n	8003ace <_free_r+0x26>
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6053      	str	r3, [r2, #4]
 8003b12:	4421      	add	r1, r4
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	e7da      	b.n	8003ace <_free_r+0x26>
 8003b18:	d902      	bls.n	8003b20 <_free_r+0x78>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	6003      	str	r3, [r0, #0]
 8003b1e:	e7d6      	b.n	8003ace <_free_r+0x26>
 8003b20:	6825      	ldr	r5, [r4, #0]
 8003b22:	1961      	adds	r1, r4, r5
 8003b24:	428b      	cmp	r3, r1
 8003b26:	bf04      	itt	eq
 8003b28:	6819      	ldreq	r1, [r3, #0]
 8003b2a:	685b      	ldreq	r3, [r3, #4]
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	bf04      	itt	eq
 8003b30:	1949      	addeq	r1, r1, r5
 8003b32:	6021      	streq	r1, [r4, #0]
 8003b34:	6054      	str	r4, [r2, #4]
 8003b36:	e7ca      	b.n	8003ace <_free_r+0x26>
 8003b38:	b003      	add	sp, #12
 8003b3a:	bd30      	pop	{r4, r5, pc}
 8003b3c:	200001b8 	.word	0x200001b8

08003b40 <sbrk_aligned>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4e0e      	ldr	r6, [pc, #56]	; (8003b7c <sbrk_aligned+0x3c>)
 8003b44:	460c      	mov	r4, r1
 8003b46:	6831      	ldr	r1, [r6, #0]
 8003b48:	4605      	mov	r5, r0
 8003b4a:	b911      	cbnz	r1, 8003b52 <sbrk_aligned+0x12>
 8003b4c:	f000 f8bc 	bl	8003cc8 <_sbrk_r>
 8003b50:	6030      	str	r0, [r6, #0]
 8003b52:	4621      	mov	r1, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 f8b7 	bl	8003cc8 <_sbrk_r>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	d00a      	beq.n	8003b74 <sbrk_aligned+0x34>
 8003b5e:	1cc4      	adds	r4, r0, #3
 8003b60:	f024 0403 	bic.w	r4, r4, #3
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d007      	beq.n	8003b78 <sbrk_aligned+0x38>
 8003b68:	1a21      	subs	r1, r4, r0
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f000 f8ac 	bl	8003cc8 <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d101      	bne.n	8003b78 <sbrk_aligned+0x38>
 8003b74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b78:	4620      	mov	r0, r4
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	200001bc 	.word	0x200001bc

08003b80 <_malloc_r>:
 8003b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	1ccd      	adds	r5, r1, #3
 8003b86:	f025 0503 	bic.w	r5, r5, #3
 8003b8a:	3508      	adds	r5, #8
 8003b8c:	2d0c      	cmp	r5, #12
 8003b8e:	bf38      	it	cc
 8003b90:	250c      	movcc	r5, #12
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	4607      	mov	r7, r0
 8003b96:	db01      	blt.n	8003b9c <_malloc_r+0x1c>
 8003b98:	42a9      	cmp	r1, r5
 8003b9a:	d905      	bls.n	8003ba8 <_malloc_r+0x28>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba8:	4e2e      	ldr	r6, [pc, #184]	; (8003c64 <_malloc_r+0xe4>)
 8003baa:	f000 f89d 	bl	8003ce8 <__malloc_lock>
 8003bae:	6833      	ldr	r3, [r6, #0]
 8003bb0:	461c      	mov	r4, r3
 8003bb2:	bb34      	cbnz	r4, 8003c02 <_malloc_r+0x82>
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f7ff ffc2 	bl	8003b40 <sbrk_aligned>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	d14d      	bne.n	8003c5e <_malloc_r+0xde>
 8003bc2:	6834      	ldr	r4, [r6, #0]
 8003bc4:	4626      	mov	r6, r4
 8003bc6:	2e00      	cmp	r6, #0
 8003bc8:	d140      	bne.n	8003c4c <_malloc_r+0xcc>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4638      	mov	r0, r7
 8003bd0:	eb04 0803 	add.w	r8, r4, r3
 8003bd4:	f000 f878 	bl	8003cc8 <_sbrk_r>
 8003bd8:	4580      	cmp	r8, r0
 8003bda:	d13a      	bne.n	8003c52 <_malloc_r+0xd2>
 8003bdc:	6821      	ldr	r1, [r4, #0]
 8003bde:	3503      	adds	r5, #3
 8003be0:	1a6d      	subs	r5, r5, r1
 8003be2:	f025 0503 	bic.w	r5, r5, #3
 8003be6:	3508      	adds	r5, #8
 8003be8:	2d0c      	cmp	r5, #12
 8003bea:	bf38      	it	cc
 8003bec:	250c      	movcc	r5, #12
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f7ff ffa5 	bl	8003b40 <sbrk_aligned>
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d02b      	beq.n	8003c52 <_malloc_r+0xd2>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	442b      	add	r3, r5
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	e00e      	b.n	8003c20 <_malloc_r+0xa0>
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	1b52      	subs	r2, r2, r5
 8003c06:	d41e      	bmi.n	8003c46 <_malloc_r+0xc6>
 8003c08:	2a0b      	cmp	r2, #11
 8003c0a:	d916      	bls.n	8003c3a <_malloc_r+0xba>
 8003c0c:	1961      	adds	r1, r4, r5
 8003c0e:	42a3      	cmp	r3, r4
 8003c10:	6025      	str	r5, [r4, #0]
 8003c12:	bf18      	it	ne
 8003c14:	6059      	strne	r1, [r3, #4]
 8003c16:	6863      	ldr	r3, [r4, #4]
 8003c18:	bf08      	it	eq
 8003c1a:	6031      	streq	r1, [r6, #0]
 8003c1c:	5162      	str	r2, [r4, r5]
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	4638      	mov	r0, r7
 8003c22:	f104 060b 	add.w	r6, r4, #11
 8003c26:	f000 f865 	bl	8003cf4 <__malloc_unlock>
 8003c2a:	f026 0607 	bic.w	r6, r6, #7
 8003c2e:	1d23      	adds	r3, r4, #4
 8003c30:	1af2      	subs	r2, r6, r3
 8003c32:	d0b6      	beq.n	8003ba2 <_malloc_r+0x22>
 8003c34:	1b9b      	subs	r3, r3, r6
 8003c36:	50a3      	str	r3, [r4, r2]
 8003c38:	e7b3      	b.n	8003ba2 <_malloc_r+0x22>
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	bf0c      	ite	eq
 8003c40:	6032      	streq	r2, [r6, #0]
 8003c42:	605a      	strne	r2, [r3, #4]
 8003c44:	e7ec      	b.n	8003c20 <_malloc_r+0xa0>
 8003c46:	4623      	mov	r3, r4
 8003c48:	6864      	ldr	r4, [r4, #4]
 8003c4a:	e7b2      	b.n	8003bb2 <_malloc_r+0x32>
 8003c4c:	4634      	mov	r4, r6
 8003c4e:	6876      	ldr	r6, [r6, #4]
 8003c50:	e7b9      	b.n	8003bc6 <_malloc_r+0x46>
 8003c52:	230c      	movs	r3, #12
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4638      	mov	r0, r7
 8003c58:	f000 f84c 	bl	8003cf4 <__malloc_unlock>
 8003c5c:	e7a1      	b.n	8003ba2 <_malloc_r+0x22>
 8003c5e:	6025      	str	r5, [r4, #0]
 8003c60:	e7de      	b.n	8003c20 <_malloc_r+0xa0>
 8003c62:	bf00      	nop
 8003c64:	200001b8 	.word	0x200001b8

08003c68 <_realloc_r>:
 8003c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	4614      	mov	r4, r2
 8003c70:	460e      	mov	r6, r1
 8003c72:	b921      	cbnz	r1, 8003c7e <_realloc_r+0x16>
 8003c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	4611      	mov	r1, r2
 8003c7a:	f7ff bf81 	b.w	8003b80 <_malloc_r>
 8003c7e:	b92a      	cbnz	r2, 8003c8c <_realloc_r+0x24>
 8003c80:	f7ff ff12 	bl	8003aa8 <_free_r>
 8003c84:	4625      	mov	r5, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8c:	f000 f838 	bl	8003d00 <_malloc_usable_size_r>
 8003c90:	4284      	cmp	r4, r0
 8003c92:	4607      	mov	r7, r0
 8003c94:	d802      	bhi.n	8003c9c <_realloc_r+0x34>
 8003c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c9a:	d812      	bhi.n	8003cc2 <_realloc_r+0x5a>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7ff ff6e 	bl	8003b80 <_malloc_r>
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0ed      	beq.n	8003c86 <_realloc_r+0x1e>
 8003caa:	42bc      	cmp	r4, r7
 8003cac:	4622      	mov	r2, r4
 8003cae:	4631      	mov	r1, r6
 8003cb0:	bf28      	it	cs
 8003cb2:	463a      	movcs	r2, r7
 8003cb4:	f7ff fed0 	bl	8003a58 <memcpy>
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4640      	mov	r0, r8
 8003cbc:	f7ff fef4 	bl	8003aa8 <_free_r>
 8003cc0:	e7e1      	b.n	8003c86 <_realloc_r+0x1e>
 8003cc2:	4635      	mov	r5, r6
 8003cc4:	e7df      	b.n	8003c86 <_realloc_r+0x1e>
	...

08003cc8 <_sbrk_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	4d06      	ldr	r5, [pc, #24]	; (8003ce4 <_sbrk_r+0x1c>)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	f7fc fee6 	bl	8000aa4 <_sbrk>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d102      	bne.n	8003ce2 <_sbrk_r+0x1a>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	b103      	cbz	r3, 8003ce2 <_sbrk_r+0x1a>
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	200001c0 	.word	0x200001c0

08003ce8 <__malloc_lock>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <__malloc_lock+0x8>)
 8003cea:	f000 b811 	b.w	8003d10 <__retarget_lock_acquire_recursive>
 8003cee:	bf00      	nop
 8003cf0:	200001c4 	.word	0x200001c4

08003cf4 <__malloc_unlock>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <__malloc_unlock+0x8>)
 8003cf6:	f000 b80c 	b.w	8003d12 <__retarget_lock_release_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	200001c4 	.word	0x200001c4

08003d00 <_malloc_usable_size_r>:
 8003d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d04:	1f18      	subs	r0, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bfbc      	itt	lt
 8003d0a:	580b      	ldrlt	r3, [r1, r0]
 8003d0c:	18c0      	addlt	r0, r0, r3
 8003d0e:	4770      	bx	lr

08003d10 <__retarget_lock_acquire_recursive>:
 8003d10:	4770      	bx	lr

08003d12 <__retarget_lock_release_recursive>:
 8003d12:	4770      	bx	lr

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
